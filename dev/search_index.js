var documenterSearchIndex = {"docs":
[{"location":"gettingstarted/#ACEtb.jl-Documentation","page":"Getting Started","title":"ACEtb.jl Documentation","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This package implements ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Pages = [\"intro.md\",\n         \"gettingstarted.md\",\n         \"acetb_intro.md\", \n         \"dftbplus_acetb.md\",\n         \"devel.md\"]\nDepth = 1","category":"page"},{"location":"gettingstarted/#Building-the-Documentation","page":"Getting Started","title":"Building the Documentation","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"To build the documentation locally, use the make.jl script. Simply switch to ACEtb/docs and execute julia make.jl\nTo publish the documentation to github, use the publish.sh script: switch to ACEtb/docs and execute ./publish.sh. This will close the `ACE_gh repository (if it isn't already), the copy into it the website, and git commit, push.","category":"page"},{"location":"intro/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"devel/#Developer-Notes","page":"Developer Docs","title":"Developer Notes","text":"","category":"section"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"This section is dedicated to developing notes on the integration of ACEtb model to other codes such as DFTB+ as well as give detailed description of the main functions that is used in the calculations.","category":"page"},{"location":"devel/#Slater-Koster-Functions","page":"Developer Docs","title":"Slater-Koster Functions","text":"","category":"section"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"ACEtb package includes functions to efficiently generate and use Slater-Koster bond hopping parameters. The main functions are sk2cart and cart2sk that gather SK parameters for the given orbitals (s, p, d ...) and the corresponding angular momentums as well as the overlapping distances of orbitals R and rotation angle, theta.","category":"page"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"To effectively store the orbital definitions, package uses SK_Bond definitions, which stores the orbitals in the given order and provides the combination of orbital-orbital bonds and the type of bonding such as sigma, pi and so on.","category":"page"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"Here for the example case, we select Al. A full orbital definition of Al up to 3d orbital can be given as","category":"page"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"1s^2","category":"page"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":", 2s^2, 2p^6, 3s^2, 3p^1 and 3d^0","category":"page"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"In above definition, the superscript numbers indicate the number of electrons in those orbitals. As ACEtb Slater-Koster module can hold any given number of orbitals for the given type of element, we can easily define the orbitals above in any order. Here, we will exactl use FHI-aims orbital definitions for the example. In FHI-aims, Tier 1 level Al is defined with s, s, s, p, p, d. These orbitals correspond to the 1s, 2s, 3s, 2p, 3p, and 3d orbitals.","category":"page"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"In ACEtb package using SlaterKoster module one can define the sequence as follows:","category":"page"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"orbitals = [\"s\", \"s\", \"s\", \"p\", \"p\", \"d\"]\nSKorbs = SKH([SKOrbitals(o) for o in orbitals])","category":"page"},{"location":"devel/#Generating-Hamiltonian-H-and-Overlap-Matrix-S-in-ACEtb.","page":"Developer Docs","title":"Generating Hamiltonian H and Overlap Matrix S in ACEtb.","text":"","category":"section"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"The main function that is used to generate Hamiltonian and overlap is buildHS.","category":"page"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"buildHS(SKH_list, H, S, iatf, iatl, natoms, pos, species, nneigh, ineigh, ipair, i2a, norbe, onsite_terms, Bondint_table, cutoff_func, cutoff; MPIproc=MPIproc)","category":"page"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"The arguements of the functions are defined as follows:","category":"page"},{"location":"devel/","page":"Developer Docs","title":"Developer Docs","text":"SKH_list : SlaterKoster orbital list such as s-s, s-p, p-p but also includes sigma and pi orbital definitions in the same order as in H and S.\nH : 1D flattened Hamiltonian matrix\nS : 1D flattened overlap matrix\niatf : index of first atom (Ex.:iatf=1)\niatl : index of last atom (Ex.:iatl=729)\nnatoms : Total number of atoms in configuration\npos : positions of atoms (729 x 3)\nspecies : element type list for each atom in pos.\nnneigh : the array of the number of neighbours for each atom \"i\" (1D array).\nineigh : the array of the neighbouring atom ids (\"j\") for each atom \"i\" (1D array).\nipair : the index where we need to write the Hamiltonian values that correspond to an atom pair.\ni2a : index of atom in pos, species array to actual atom element type.\nnorbe : number of orbitals for each element type.\nonsite_terms : the onsite block's diagonal hamiltonian elements.\nBondint_table : The function for ACEtb model that holds bond integral predictions. \ncutoff_func : The cut off function for ACEtb model.\ncutoff : The cut off distance in Angstrom.\nMPIproc : If it is 1, the running process is the leading process in DFTB+ MPI parallelisation.","category":"page"},{"location":"fitting/#Fitting","page":"How to fit ACEtb Model","title":"Fitting","text":"","category":"section"},{"location":"fitting/","page":"How to fit ACEtb Model","title":"How to fit ACEtb Model","text":"The fitting of the bond integrals is done using a least-square fit (see the module Predictions - predictions.jl).","category":"page"},{"location":"fitting/","page":"How to fit ACEtb Model","title":"How to fit ACEtb Model","text":"The fitting requires the choice of a basis, defined through body-order, maximum total degree, and environment degree, this last degree defining the contribution of the interactions between atoms that do not constitute the bond -see degreeM. The basis also depends on different cutoff parameters.","category":"page"},{"location":"fitting/","page":"How to fit ACEtb Model","title":"How to fit ACEtb Model","text":"The data consists of configurations and corresponding bond integrals. From the configurations are computed the bonds and their corresponding neighbouring atoms (see bonds.jl).","category":"page"},{"location":"fitting/","page":"How to fit ACEtb Model","title":"How to fit ACEtb Model","text":"The ACEtb basis functions are then evaluated on each bond+environment. This gives the LSQ matrix. The coefficients for the approximations of the bond integrals as linear combinations of ACEtb basis functions are then found solving a LSQ system (see fit_BI).","category":"page"},{"location":"dftbplus_acetb/#DFTB-Integration-Using-lib_acetb","page":"DFTB+ Integration","title":"DFTB+ Integration Using lib_acetb","text":"","category":"section"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"lib_acetb is a module that integrates ACEtb.jl model into DFTB+ using C wrappers of Julia.","category":"page"},{"location":"dftbplus_acetb/#Dependencies","page":"DFTB+ Integration","title":"Dependencies","text":"","category":"section"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"Julia:","category":"page"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"ACEtb","category":"page"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"Libraries:","category":"page"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"OpenBLAS\nMPI (Ex.: OpenMPI)","category":"page"},{"location":"dftbplus_acetb/#Installation","page":"DFTB+ Integration","title":"Installation","text":"","category":"section"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"# Before starting installation make sure you installed Julia >= 1.5\njulia\n] registry add https://github.com/JuliaMolSim/MolSim.git\n] add https://github.com/ACEsuit/ACEtb.jl.git\n# CTRL+D\ngit clone https://github.com/berkonat/lib_acetb\ncd lib_acetb/dftbplus\n./compile-MPI.sh\ncd ../test/\n# Serial run\n../dftbplus/build/install/bin/dftb+\n# Parallel run\nmpirun -np 4 ../dftbplus/build/install/bin/dftb+","category":"page"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"For MacOS, one can install the dependencies using brew with","category":"page"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"brew install openblas\nbrew install openmpi\nbrew install scalapack","category":"page"},{"location":"dftbplus_acetb/#Python-installation-of-DFTB","page":"DFTB+ Integration","title":"Python installation of DFTB+","text":"","category":"section"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"export PYTHONPATH=$PYTHONPATH:$HOME/lib_acetb/dftbplus/build/install/lib/python3.9/site-packages","category":"page"},{"location":"dftbplus_acetb/#Band-Structure-Calculation","page":"DFTB+ Integration","title":"Band Structure Calculation","text":"","category":"section"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"../dftbplus/build/install/bin/dp_bands band.out band_tot.dat","category":"page"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"For more information on band structure calculation with DFTB+ and how to visulize the result, please check dftbplus-recipes.readthedocs.io.","category":"page"},{"location":"dftbplus_acetb/#Plotting","page":"DFTB+ Integration","title":"Plotting","text":"","category":"section"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"Use Plot-Bands.ipynb to plot Al FCC results and compare the output of DFTB+ from band_tot.dat file.","category":"page"},{"location":"dftbplus_acetb/#Systematic-fits","page":"DFTB+ Integration","title":"Systematic fits","text":"","category":"section"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"To run fits, run the script ./script_fits.sh and adjust the parameters that you want to test in the script. Check also that in the file dftbin.hsd the following line matches with the file names in `./scriptfits.sh`:","category":"page"},{"location":"dftbplus_acetb/","page":"DFTB+ Integration","title":"DFTB+ Integration","text":"    Suffix = \".acetb.json\"","category":"page"},{"location":"acetb_usage/#ACEtb.jl-Documentation","page":"Basic Usage","title":"ACEtb.jl Documentation","text":"","category":"section"},{"location":"acetb_usage/","page":"Basic Usage","title":"Basic Usage","text":"This package implements ","category":"page"},{"location":"acetb_usage/","page":"Basic Usage","title":"Basic Usage","text":"Pages = [\"intro.md\",\n         \"gettingstarted.md\",\n         \"acetb_intro.md\", \n         \"dftbplus_acetb.md\",\n         \"devel.md\"]\nDepth = 1","category":"page"},{"location":"acetb_usage/#Building-the-Documentation","page":"Basic Usage","title":"Building the Documentation","text":"","category":"section"},{"location":"acetb_usage/","page":"Basic Usage","title":"Basic Usage","text":"To build the documentation locally, use the make.jl script. Simply switch to ACEtb/docs and execute julia make.jl\nTo publish the documentation to github, use the publish.sh script: switch to ACEtb/docs and execute ./publish.sh. This will close the `ACE_gh repository (if it isn't already), the copy into it the website, and git commit, push.","category":"page"},{"location":"acetb_intro/#ACEtb.jl-Documentation","page":"What is ACEtb Model","title":"ACEtb.jl Documentation","text":"","category":"section"},{"location":"acetb_intro/","page":"What is ACEtb Model","title":"What is ACEtb Model","text":"This package extends ACE.jl which provides approximation schemes for permutation and isometry invariant functions, based on symmetric polynomial, in the case where the function to approximate satisfy permutation invariance with respect to like atoms, and rotation invariance with respect to a bond.","category":"page"},{"location":"acetb_intro/","page":"What is ACEtb Model","title":"What is ACEtb Model","text":"To ensure the symmetry, the basis functions are of the form","category":"page"},{"location":"acetb_intro/","page":"What is ACEtb Model","title":"What is ACEtb Model","text":"f(R_ij R_env) = g(R_env-R_i) + g(R_env-R_j)","category":"page"},{"location":"acetb_intro/","page":"What is ACEtb Model","title":"What is ACEtb Model","text":",","category":"page"},{"location":"acetb_intro/","page":"What is ACEtb Model","title":"What is ACEtb Model","text":"where g is an ACE function, i.e. satisfies rotation invariance. Here R_ij is the vector of the bond and R_env contains the coordinates of the atoms near the bond.","category":"page"},{"location":"acetb_intro/#Developers","page":"What is ACEtb Model","title":"Developers","text":"","category":"section"},{"location":"acetb_intro/","page":"What is ACEtb Model","title":"What is ACEtb Model","text":"Geneviève Dusson\nBerk Onat\nReinhard Maurer\nChristoph Ortner\nJames R. Kermode","category":"page"},{"location":"acetb_intro/#Citation","page":"What is ACEtb Model","title":"Citation","text":"","category":"section"},{"location":"acetb_intro/","page":"What is ACEtb Model","title":"What is ACEtb Model","text":"...","category":"page"},{"location":"acetb_intro/#License","page":"What is ACEtb Model","title":"License","text":"","category":"section"},{"location":"acetb_intro/","page":"What is ACEtb Model","title":"What is ACEtb Model","text":"...","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"The installation instructions here include steps for both ACEtb.jl package and lib_acetb API compilation in DFTB+ code.","category":"page"},{"location":"installation/#ACEtb.jl-Installation","page":"Installation","title":"ACEtb.jl Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"ACEtb.jl is a pure Julia code and can be directly installed using the Julia package following the instructions below. We recommend Julia with version 1.5 and higher to use with ACEtb.jl package as the code is only tested with version 1.5 and higher (as of now, we also tested it with 1.6).","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"] add https://github.com/ACEsuit/ACEtb.jl.git","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Here, ] indicates that REPL is in pkg mode at Julia.","category":"page"},{"location":"installation/#Testing-ACEtb.jl-installation","page":"Installation","title":"Testing ACEtb.jl installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"ACEtb package includes several unit tests that can be run using Julia pkg testing command as follows:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"] test ACEtb","category":"page"},{"location":"installation/#Installing-DFTB-with-ACEtb","page":"Installation","title":"Installing DFTB+ with ACEtb","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"DFTB+ integration of ACEtb needs the compilation of lib_acetb (currently, within DFTB+) code. This section only covers the installation of DFTB+ with ACEtb module and will not provide information on how DFTB+ is compiled with its other modules. If you are interested in the detailed explanation of how the integration is done, please check DFTB+ Integration section.","category":"page"},{"location":"installation/#Dependencies-of-DFTB-and-lib_acetb","page":"Installation","title":"Dependencies of DFTB+ and lib_acetb","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"As well as Julia with version 1.5 and higher is needed and ACEtb is installed in main environment (@v1.5 or equivalent in Julia REPL), the following libraries are also needed to compile DFTB+.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Libraries:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"OpenBLAS\nMPI (Ex.: OpenMPI. Only if parallelisation of DFTB+ is needed.)\nScaLAPACK (Only needed if DFTB+ is compiled with MPI)","category":"page"},{"location":"installation/#Installing-Dependencies-at-macOS","page":"Installation","title":"Installing Dependencies at macOS","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"The dependencies may be installed using Homebrew with the following commands:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"brew install openblas\nbrew install openmpi\nbrew install scalapack","category":"page"},{"location":"installation/#Installing-Dependencies-at-Linux-(Ubuntu)","page":"Installation","title":"Installing Dependencies at Linux (Ubuntu)","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"The dependencies may be installed using Homebrew with the following commands:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"apt-get update\napt-get install make build-essential g++ gfortran\napt-get install libblas-dev liblapack-dev libopenmpi-dev libscalapack-mpi-dev openmpi-bin","category":"page"},{"location":"installation/#Installation-of-DFTB-with-WITH_ACETBTRUE-for-lib_acetb","page":"Installation","title":"Installation of DFTB+ with WITH_ACETB=TRUE for lib_acetb","text":"","category":"section"},{"location":"installation/#Compiling-DFTB-Serial","page":"Installation","title":"Compiling DFTB+ Serial","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"In dftbplus directory of DFTB+ repository, run the following commands:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"mkdir build\ncd build\ncmake -DWITH_ACETB=TRUE ..\nmake\nmake install","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Make sure that the configuration step of CMake run includes the following outputs where Julia and LAPACK libraries are found:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"In case LAPACK libraries cannot be found by CMake, specify the correct library path using -DLAPACK_LIBRARY_DIRS as following:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"cmake -DWITH_ACETB=TRUE -DLAPACK_LIBRARY_DIRS=/usr/local/opt/openblas/lib ..","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Here, /usr/local/opt/openblas/lib is the OpenBLAS library path that is installed by Homebrew at macOS. Cange the directory accordingly to match your system's installation path.","category":"page"},{"location":"installation/#Compiling-DFTB-Parallel-using-MPI","page":"Installation","title":"Compiling DFTB+ Parallel using MPI","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Here we assume you use OpenMPI library. In case you would like to use Intel MPI or MPICH, make sure CMake can find the correct library paths.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"A typical command to compile DFTB+ with MPI is as follows","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"cmake -DWITH_MPI=TRUE -DWITH_ACETB=TRUE ..\nmake\nmake install","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"With the above parameters, CMake try to find the ScaLAPACK library by looking at the default locations and names. In case, the installed ScaLAPACK library may have a different name and path in your system, you may need to explicitly specify the correct name of ScaLAPACK library and path. This can be done using the following flags:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"cmake -DWITH_MPI=TRUE -DWITH_ACETB=TRUE -DLAPACK_LIBRARY_DIRS=/usr/local/opt/openblas/lib -DSCALAPACK_LIBRARIES=\"scalapack\" -DSCALAPACK_LIBRARY=\"scalapack\" -DSCALAPACK_LIBRARY_DIRS=/usr/local/opt/scalapack/lib ..","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Here, ScaLAPACK library name is specified with scalapack and hence CMake try to find libscalapack.so in the directory that is given with -DSCALAPACK_LIBRARY_DIRS.","category":"page"},{"location":"installation/#Setting-Python-interface","page":"Installation","title":"Setting Python interface","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"As we did not specify a system-wide installation path above, DFTB+ and its Python iterface dptools will only be installed in the build/install directory where build is the dorectory we run cmake. ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"To add the path of the installed dptools Python module to the Python path, you need to use the following command:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"export PYTHONPATH=$PYTHONPATH:$HOME/dftbplus/build/install/lib/python3.9/site-packages","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"The above command assumes that you download DFTB+ repository (dftbplus) into your home directory and cmake found Python 3.9 in your system. To make sure the path is added to Python module paths in all shell instances, add the above line to your ~/.bashrc and ~/.bash_profile (for macOS, ~/.profile) with","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"cat \"export PYTHONPATH=$PYTHONPATH:$HOME/dftbplus/build/install/lib/python3.9/site-packages\" >> ~/.bashrc\ncat \"export PYTHONPATH=$PYTHONPATH:$HOME/dftbplus/build/install/lib/python3.9/site-packages\" >> ~/.bash_profile\nsource ~/.bash_profile","category":"page"},{"location":"installation/#Adding-DFTB-to-System-Path","page":"Installation","title":"Adding DFTB+ to System Path","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Running the following lines at command line will add the bin directory of installation to the system-wide paths. Once the commands below are issued, executables of DFTB+ such as dftb+ and dp_bands can be run directly at any path.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"cat \"export PATH=$PATH:$HOME/dftbplus/build/install/bin/\" >> ~/.bashrc\ncat \"export PATH=$PATH:$HOME/dftbplus/build/install/bin/\" >> ~/.bash_profile\nsource ~/.bash_profile","category":"page"},{"location":"installation/#Running-the-code-(Serial)","page":"Installation","title":"Running the code (Serial)","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Several test configurations are provided in test directory of lib_acetb distribution. To test the code, enter to test directory where dftb_in.hsd file resides. To run the code serial, use the following command:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"dftb+","category":"page"},{"location":"installation/#Running-the-code-with-Julia-Threads-(Parallel)","page":"Installation","title":"Running the code with Julia Threads (Parallel)","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"ACEtb benefits from Julia threads by distributing per-atom calculations to each thread. ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Julia threads can be set by","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"export JULIA_NUM_THREADS=4","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"where 4 is the number of Julia threads that is used by each process. ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Note: ACEtb does not use OpenMP Threads and hence setting OMP_NUM_THREADS does not have any effect.","category":"page"},{"location":"installation/#Running-the-code-with-MPI-(Parallel)","page":"Installation","title":"Running the code with MPI (Parallel)","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"DFTB+ benefits from MPI paralleisation not only by distributing per-atom calculations to each process but also used BLACS routines at ScaLAPACK. ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Once DFTB+ is compiled with MPI support, you can run the code using the following command:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"mpirun -np 4 dftb+","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Note: Keep in mind that setting Julia Threads and using MPI will provide a mixed parallisation scheme and can benefit to speed up in multiple nodes. Example setting:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"For 2 nodes with 4 cores:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"export JULIA_NUM_THREADS=4\nmpirun -np 2 dftb+","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"DFTB+ outputs these settings as following:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Julia threads:               4\nMPI processes:               2\nOpenMP threads:              1","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"See more information on parallelisation of DFTB+ at Parallel usage of DFTB+","category":"page"},{"location":"#ACEtb.jl-Documentation","page":"Home","title":"ACEtb.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package implements ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"intro.md\",\n         \"gettingstarted.md\",\n         \"acetb_intro.md\", \n         \"dftbplus_acetb.md\",\n         \"devel.md\"]\nDepth = 2","category":"page"},{"location":"#Building-the-Documentation","page":"Home","title":"Building the Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To build the documentation locally, use the make.jl script. Simply switch to ACEtb/docs and execute julia make.jl\nTo publish the documentation to github, use the publish.sh script: switch to ACEtb/docs and execute ./publish.sh. This will close the `ACE_gh repository (if it isn't already), the copy into it the website, and git commit, push.","category":"page"}]
}
